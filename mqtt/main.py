# https://www.mnassa.org.za/html/Oct2017/2017MNASSA..76..Oct..215.pdf## I = 3.719 x 10^(-9-0.4*M)  W/m2s2## 1 W/m2 = 1 W/10^4 cm2 = 10^-4 W/cm2 = 100 uW/cm2## I = 3.719 x 10^(-7-0.4*M)  uW/cm2s2## from datasheet: at gain = 400 and T = 100 ms, 264 counts / uW/cm2# this conversion is done in tsl2591.calculate_light()# # log (I) = log (3.719) - 7 - 0.4 M## M = -16.07 - 2.5*log(C)import tsl2591import timeimport mathfrom machine import I2C, RTCM0 = -16.07GA = 25.55  # this is a glass attenuation factor, depends on what's in front of the detector. Guesstimatetsl = tsl2591.Tsl2591(1,2)tsl.set_gain(tsl2591.GAIN_MED)tsl.set_timing(tsl2591.INTEGRATIONTIME_300MS)rtc = RTC()tnow = rtc.datetime()def DateTime2Str(dt):    ymd = str(tnow[0]) + str(tnow[1])    if (tnow[2] < 10):        ymd = ymd + '0' + str(tnow[2])    else:        ymd = ymd + str(tnow[2])    if (tnow[4] < 9):       hms = '0' + str(tnow[4] + 1) + ':'    else:         hms = str(tnow[4] + 1) + ':'    if (tnow[5] < 10):        hms = hms + '0' + str(tnow[5]) + ':'    else:         hms = hms + str(tnow[5]) + ':'    if (tnow[6] < 10):        hms = hms + '0' + str(tnow[6])    else:         hms = hms + str(tnow[6])    str_date_time = ymd + '-' + hms    return str_date_timedef sub_cb(topic, msg):  print((topic, msg))  if topic == b'notification' and msg == b'received':    print('ESP received hall value')def connect_and_subscribe():  global client_id, mqtt_server, topic_sub  client = MQTTClient(client_id, mqtt_server)  client.set_callback(sub_cb)  client.connect()  client.subscribe(topic_sub)  print('Connected to %s MQTT broker, subscribed to %s topic' % (mqtt_server, topic_sub))  return clientdef restart_and_reconnect():  print('Failed to connect to MQTT broker. Reconnecting...')  time.sleep(10)  machine.reset()try:  client = connect_and_subscribe()except OSError as e:  restart_and_reconnect()oldtime = time.time()while True:  try:      newtime = time.time()      if (newtime - oldtime) > message_interval:          tnow = rtc.datetime()          StrTimestamp = DateTime2Str(tnow)          client.publish(topic_pub_time, StrTimestamp)          full, ir = tsl.advanced_read()          full_C, ir_C = tsl.calculate_light(full, ir)          if ((full_C - ir_C) != 0):              mpsas = M0 + GA -2.5*math.log10(full_C - ir_C)          else:              mpsas = -25.          mpsas_msg = b'SQM: {0:.2f}'.format(mpsas)          client.publish(topic_pub, mpsas_msg)          oldtime = newtime  except OSError as e:      restart_and_reconnect()